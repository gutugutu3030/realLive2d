/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.gutugutu3030.mpg;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.github.gutugutu3030.config.ConfigReader;
import io.github.gutugutu3030.mpg.config.Config;
import io.github.gutugutu3030.pi.PCA9685;
import io.github.gutugutu3030.websocket.ArtWebSocketServer;
import io.github.gutugutu3030.websocket.WebSocketMethod;

/** メインクラス */
public class App extends Thread {

  /** ロガー */
  static Logger log = LoggerFactory.getLogger(App.class);

  /**
   * 起動時呼び出し関数
   *
   * @param args 引数
   */
  public static void main(String[] args) {
    log.info("args:{}", Arrays.toString(args));
    Path configDir = (args.length > 0) ? Paths.get(args[0], "launch" //
        , Optional.of(args).filter(a -> a.length > 1).map(a -> a[1]).orElse("default") //
        , "config.yaml") : Paths.get(System.getProperty("user.dir"), "launch" //
            , Optional.of(args).filter(a -> a.length > 0).map(a -> a[0]).orElse("default") //
            , "config.yaml");
    log.info("config:{}", configDir);
    new App(ConfigReader.readConfig(configDir).filter(Config.class::isInstance).map(Config.class::cast).orElseThrow())
        .start();
  }

  /** コンフィグ */
  Config config;

  /** フロントWEB通信クラス */
  ArtWebSocketServer webSocketServer;

  /** サーボをi2cで管理するPCA9685 */
  PCA9685 pca9685;

  /**
   * コンストラクタ
   *
   * @param abstractConfig コンフィグ
   */
  private App(Config abstractConfig) {
    log.info("kiteru?");
    this.config = Optional.ofNullable(abstractConfig).orElseGet(() -> new Config());
    log.info("Config:{}", this.config);
    webSocketServer = new ArtWebSocketServer(this, abstractConfig);
    log.info("constructor ok.");
    // サーボi2c
    pca9685 = new PCA9685(config.servo.PCA9685Channels);
  }

  /** {@inheritDoc} */
  @Override
  public void run() {
    webSocketServer.start();

    while (true) {
      // rainbow.run();
      sleep(10);
    }
  }

  /**
   * ウェブソケットで受け取ったDMXを設定します
   *
   * @param data DMXデータ
   */
  @WebSocketMethod(addr = "/set/dmx")
  public void setDmxFromFront(List<Integer> data) {
  }

  /** ウェブソケットにDMXを送信します */
  @WebSocketMethod(addr = "/request/dmx")
  public void sendDmxToFront() {
  }

  /** ライト情報をDMXに送信します */
  @WebSocketMethod(addr = "/request/lightConfig")
  public void sendLightsSettingtoFront() {
  }

  /**
   * ログを表示します
   *
   * @param str ログ内容
   */
  @WebSocketMethod(addr = "/log/server")
  public void logDebug(String str) {
  }

  /**
   * 一定秒数待機します
   *
   * @param millis 待機時間
   */
  void sleep(int millis) {
    try {
      Thread.sleep(millis);
    } catch (Exception e) {
      log.error("failed sleep.", e);
    }
  }
}

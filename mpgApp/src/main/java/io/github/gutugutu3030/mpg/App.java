/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.gutugutu3030.mpg;

import io.github.gutugutu3030.config.ConfigReader;
import io.github.gutugutu3030.mpg.config.Config;
import io.github.gutugutu3030.mpg.layer.Layer;
import io.github.gutugutu3030.mpg.message.LayersInfoOscMessage;
import io.github.gutugutu3030.mpg.message.SetLayerPositionOscMessage;
import io.github.gutugutu3030.osc.OscMethod;
import io.github.gutugutu3030.osc.OscMethodType;
import io.github.gutugutu3030.pi.PCA9685;
import io.github.gutugutu3030.util.Vector;
import io.github.gutugutu3030.websocket.OscWebSocketServer;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** メインクラス */
public class App extends Thread {

  /** ロガー */
  static Logger log = LoggerFactory.getLogger(App.class);

  /**
   * 起動時呼び出し関数
   *
   * @param args 引数
   */
  public static void main(String[] args) {
    log.info("args:{}", Arrays.toString(args));
    Path configDir = (args.length > 0) ? Paths.get(args[0], "launch" //
        , Optional.of(args).filter(a -> a.length > 1).map(a -> a[1]).orElse("default") //
        , "config.yaml") : Paths.get(System.getProperty("user.dir"), "launch" //
            , Optional.of(args).filter(a -> a.length > 0).map(a -> a[0]).orElse("default") //
            , "config.yaml");
    log.info("config:{}", configDir);
    new App(ConfigReader.readConfig(configDir).filter(Config.class::isInstance).map(Config.class::cast).orElseThrow())
        .start();
  }

  /** コンフィグ */
  Config config;

  /** フロントWEB通信クラス */
  OscWebSocketServer webSocketServer;

  /** サーボをi2cで管理するPCA9685 */
  PCA9685 pca9685;

  /** レイヤ */
  List<Layer> layers;

  /**
   * コンストラクタ
   *
   * @param abstractConfig コンフィグ
   */
  private App(Config abstractConfig) {
    log.info("kiteru?");
    this.config = Optional.ofNullable(abstractConfig).orElseGet(() -> new Config());
    log.info("Config:{}", this.config);
    webSocketServer = new OscWebSocketServer(this, config.websocket);
    log.info("constructor ok.");
    // サーボi2c
    pca9685 = new PCA9685(config.servo.PCA9685Channels);
    layers = IntStream.range(0, config.panel.num).mapToObj(i -> new Layer(config, i % 2 == 1))
        .collect(Collectors.toList());
  }

  /** {@inheritDoc} */
  @Override
  public void run() {
    webSocketServer.start();

    while (true) {
      sleep(10);
      pca9685.write(layers.stream().map(Layer::getPWMList).flatMap(List::stream).collect(Collectors.toList()));
    }
  }

  /**
   * レイヤのポジションを設定します
   *
   * @param data [layer1'sX(mm), layer1'sY(mm), layer1'sAngle(radians), ...]
   */
  @OscMethod(addr = "/set/layers")
  public void setLayersPosition(List<Float> data) {
    for (int i = 0; i < data.size() - 2; i += 3) {
      if (i / 3 >= layers.size()) {
        break;
      }
      layers.get(i / 3).set(new Vector(data.get(i), data.get(i + 1)), data.get(i + 2));
    }
    this.getServoAngles();
  }

  /**
   * レイヤのポジションを設定します。<br>
   * 角度は-15度から15度を-1から1に変換したものとなり、平行移動量はその角度での移動可能な量を-1から1にスケールした値で指定します
   * 
   * @param data [layer1'sX(-1 ~ 1), layer1'sY(-1 ~ 1), layer1'sAngle(-1 ~ 1),
   *             ...]
   */
  @OscMethod(addr = "/setLayerScaled")
  public void setLayersScaledPosition(List<Float> data) {
    for (int i = 0; i < data.size() - 2; i += 3) {
      if (i / 3 >= layers.size()) {
        break;
      }
      layers.get(i / 3).setScaledPosition(data.get(i), data.get(i + 1), data.get(i + 2));
    }
    this.getServoAngles();
  }

  /**
   * レイヤのポジションを一括して設定します
   *
   * @param x     レイヤX (mm)
   * @param y     レイヤY (mm)
   * @param angle 傾き (radians)
   */
  @OscMethod(addr = "/setCommonPosition")
  public void setCommonLayerPosition(float x, float y, float angle) {
    layers.forEach(l -> l.set(new Vector(x, y), angle));
    this.getServoAngles();
  }

  /**
   * 目線の位置を設定します
   *
   * @param x 目線X [-1 ~ 1]
   * @param y 目線Y [-1 ~ 1]
   */
  @OscMethod(addr = "/setFaceLookingPosition")
  public void setFaceLookingPosition(float x, float y) {
  }

  /** 各種情報を取得します */
  @OscMethod(addr = "/get/info", using = OscMethodType.WEBSOCKET)
  public void getInfo() {
    webSocketServer.sendOscBundle(new SetLayerPositionOscMessage(layers),
        new LayersInfoOscMessage(layers.stream().map(Layer::getInfoOscMessage)));
  }

  /** サーボの角度を取得します */
  @OscMethod(addr = "/get/servoAngles", using = OscMethodType.WEBSOCKET)
  public void getServoAngles() {
    webSocketServer.sendOscMessage(new SetLayerPositionOscMessage(layers));
  }

  /**
   * 一定秒数待機します
   *
   * @param millis 待機時間
   */
  void sleep(int millis) {
    try {
      Thread.sleep(millis);
    } catch (Exception e) {
      log.error("failed sleep.", e);
    }
  }
}
